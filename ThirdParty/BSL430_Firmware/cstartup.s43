/* --------------------------------------------------------------------------
* Copyright 2012, IAR Systems AB.
*
* This source code is the property of IAR Systems. The source code may only
* be used together with the IAR Embedded Workbench. Redistribution and use
* in source and binary forms, with or without modification, is permitted
* provided that the following conditions are met:
*
* - Redistributions of source code, in whole or in part, must retain the
* above copyright notice, this list of conditions and the disclaimer below.
*
* - IAR Systems name may not be used to endorse or promote products
* derived from this software without specific prior written permission.
*
* THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES
* WITH REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF
* MERCHANTABILITY AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR
* ANY SPECIAL, DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES
* WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER IN AN
* ACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT OF
* OR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.
*
*
* $Revision: 5271 $
* ------------------------------------------------------------------------*/
//
// Please define one of the following preprocessor symbols in order to
// customize the system initialization process.
//
// IGNORE_SEG_INIT    -- To remove segment initialization.
// IGNORE_DATA16_DATA -- To remove segment initialization for DATA16 data.
//
// Note: In the current version the symbols "IGNORE_SEG_INIT" and
// "IGNORE_DATA16_DATA" will perform the same task.  However, both are
// supported in order to be compatible with other IAR Compilers.
//

#include "macros.m43"
#include "cfi.m43"

#define XRSEGCSTART RSEG CSTART:CODE:NOROOT(1)

        XCFI_NAMES libNames
        XCFI_COMMON libCommon, libNames


// ---------------------------------------------------------
// Define reset vector.
//

        MODULE  ?reset_vector

        RSEG    RESET:CONST:NOROOT(1)
        PUBLIC  ?reset_vector
        EXTERN  __program_start

?reset_vector:
        DC16    __program_start

        ENDMOD


// ---------------------------------------------------------
// The cstartup code -- call __low_level_init, perform initialization,
// call constructors and call main.  If main returns the exit system
// is started.
//
        MODULE  ?cstart

//
// Ensure that this is build with the same "positions independent
// code" settings as the compiler uses.
//

        XPICRTMODEL


//
// Forward declarations of segments.
//

        RSEG    HEAP:DATA:NOROOT(1)
        RSEG    CSTACK:DATA:NOROOT

        RSEG    DATA16_Z:DATA:NOROOT
        RSEG    DATA16_I:DATA:NOROOT
        RSEG    DATA16_ID:DATA:NOROOT
#if __CORE__==__430X_CORE__
        RSEG    DATA20_Z:DATA:NOROOT
        RSEG    DATA20_I:DATA:NOROOT
        RSEG    DATA20_ID:DATA:NOROOT
#endif

// ---------------------------------------------------------
// System initialization.
//

        XRSEGCSTART
        PUBLIC  __program_start

        EXTERN  ?reset_vector
        REQUIRE ?reset_vector

__program_start:

        PUBLIC ?cstart_begin
?cstart_begin:

        // --------------------
        // Turn off the watchdog.
        //
        // Note: by default, this is disabled. Remove the "#if 0" and
        // "#endif" lines to enable it.
        //

#if 0

#define WDTPW   (0x5A00)
#define WDTHOLD (0x0080)
#define WDTCTL  (0x0120)

        MOV     #WDTPW + WDTHOLD, &WDTCTL
#endif

        // --------------------
        // Initialize SP to point to the top of the stack.
        //
        MOV     #SFE(CSTACK), SP

        //
        // Ensure that main is called.
        //
        REQUIRE ?cstart_call_main


// -----------------------------------------------
// Call __low_level_init to perform initialization before initializing
// segments and calling main. If the function returns 0 no segment
// initialization should take place.
//
// Link with your own version of __low_level_init to override the
// default action: to do nothing but return 1.
//

        XRSEGCSTART

        PUBLIC  ?cstart_call_low_level_init
        EXTERN  __low_level_init

?cstart_call_low_level_init:
        XCALL   #__low_level_init
        CMP     #0, W0
        JEQ     ?cstart_call_main


// -----------------------------------------------
// Segment initialization:
//
// xxx_Z  -- uninitialized data that are filled with zeros.
// xxx_I  -- initialized data that gets the values from the corresponding
//           xxx_ID segment.
//

#ifndef IGNORE_SEG_INIT

#ifndef IGNORE_DATA16_DATA

        //
        // Clear DATA16_Z.
        //

        XRSEGCSTART
        PUBLIC  ?cstart_init_zero
        //EXTERN  __data16_memzero

?cstart_init_zero:
        //MOV     #SFB DATA16_Z,    CW0
        //MOV     #sizeof DATA16_Z, CW1

        //XCALL   #__data16_memzero


        //
        // Copy DATA16_ID to DATA16_I
        //

        XRSEGCSTART
        PUBLIC  ?cstart_init_copy
        EXTERN  __data16_memcpy

?cstart_init_copy:
        MOV     #SFB DATA16_I,  CW0
        MOV     #SFB DATA16_ID, CW1

#if CALLING_CONVENTION == 1
        PUSH.W  #sizeof DATA16_I

        XCALL   #__data16_memcpy

        ADD     #2, SP
#else
        MOV     #sizeof DATA16_I, CW2

        XCALL   #__data16_memcpy
#endif // CALLING_CONVENTION

#endif // IGNORE_DATA16_DATA

#if __CORE__==__430X_CORE__

#ifndef IGNORE_DATA20_DATA

        //
        // Clear DATA20_Z.
        //

        XRSEGCSTART
        PUBLIC  ?cstart_init_zero20
        EXTERN  __data20_memzero

?cstart_init_zero20:
        MOVA    #SFB DATA20_Z,W0
        MOV.W   #LWRD(sizeof DATA20_Z), L1L
        MOV.W   #HWRD(sizeof DATA20_Z), L1H

        XCALL   #__data20_memzero


        //
        // Copy DATA20_ID to DATA20_I
        //

        XRSEGCSTART
        PUBLIC  ?cstart_init_copy20
        EXTERN  __data20_memcpy

?cstart_init_copy20:
        MOVA    #SFB DATA20_I,  CW0
        MOVA    #SFB DATA20_ID, CW1
#if CALLING_CONVENTION == 1
        PUSHX.A #sizeof DATA20_I

        XCALL   #__data20_memcpy

        ADD     #4, SP
#else
        MOV.W   #LWRD(sizeof DATA20_I), L1L
        MOV.W   #HWRD(sizeof DATA20_I), L1H

        XCALL   #__data20_memcpy
#endif

#endif // IGNORE_DATA16_DATA

#endif

#endif // IGNORE_SEG_INIT



// -----------------------------------------------
// Call constructors of static objects.
//

        RSEG    DIFUNCT:CONST:NOROOT(1)
        XRSEGCSTART
        PUBLIC  ?cstart_call_ctors

        EXTERN  __call_ctors

?cstart_call_ctors:

#ifdef REGISTER_MODEL_REG20

        MOVA    #SFB DIFUNCT, CW0
        MOVA    #SFE DIFUNCT, CW1

#else /* REGISTER_MODEL_REG20 */

        MOV.W   #SFB DIFUNCT, CW0
        MOV.W   #SFE DIFUNCT, CW1

#endif /* REGISTER_MODEL_REG20 */

        XCALL   #__call_ctors


// -----------------------------------------------
// Call main() with no arguments and then exit using the return value
// of main as the parameter.
//

        XRSEGCSTART
        PUBLIC  ?cstart_call_main

        EXTERN  main
        EXTERN  exit

?cstart_call_main:
        XCALL   #main
        jmp     $
        // XCALL   #exit

        PUBLIC  ?cstart_end
?cstart_end:

        // Note: "ENDMOD label" means code that this module is the
        // start of the application.
        ENDMOD  __program_start




// ---------------------------------------------------------
// __low_level_init
//
// The only action of this default version of __low_level_init is to
// return 1. By doing so it signals that normal initialization of data
// segments should be done.
//
// A customized version of __low_level_init may be created in order to
// perform initialization before initializing segments and calling main
// and/or to skip initialization of data segments under certain
// circumstances.
//
// For further details see sample file lowinit.c
//


        MODULE  lowinit

        PUBLIC  __low_level_init

        RSEG    CODE:CODE:NOROOT(1)

__low_level_init:
        MOV     #1, W0                  // By returning 1 this function
        XRET                            // indicates that the normal
                                        // initialization should take place

        ENDMOD

        END
