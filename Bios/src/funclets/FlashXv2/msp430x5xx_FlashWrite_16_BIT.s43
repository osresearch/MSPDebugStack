/**
* \ingroup <FILEGROUP>
*
* \file msp430x5xx_FlashWrite.s43
*
* \brief Flash word write funclet
*
*/
/*
 * Copyright (C) 2012 Texas Instruments Incorporated - http://www.ti.com/ 
 * 
 * 
 *  Redistribution and use in source and binary forms, with or without 
 *  modification, are permitted provided that the following conditions 
 *  are met:
 *
 *    Redistributions of source code must retain the above copyright 
 *    notice, this list of conditions and the following disclaimer.
 *
 *    Redistributions in binary form must reproduce the above copyright
 *    notice, this list of conditions and the following disclaimer in the 
 *    documentation and/or other materials provided with the   
 *    distribution.
 *
 *    Neither the name of Texas Instruments Incorporated nor the names of
 *    its contributors may be used to endorse or promote products derived
 *    from this software without specific prior written permission.
 *
 *  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS 
 *  "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT 
 *  LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
 *  A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT 
 *  OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, 
 *  SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT 
 *  LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
 *  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
 *  THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT 
 *  (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE 
 *  OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 */

#include "msp430x54x.h"
;-------------------------------------------------------------------------------
            NAME    FlashWordWrite
;-------------------------------------------------------------------------------
; Exported Symbols
PUBLIC      MyWriteAddr
PUBLIC      MyWriteSize
PUBLIC      MyWriteLock
PUBLIC      WordWrite
;-------------------------------------------------------------------------------
            RSEG    MYVARS
;-------------------------------------------------------------------------------
MyProgStart
MyStart     DW      WordWrite - MyProgStart
MyEnd       DW      TheEnd - MyProgStart
MyLockTst   DW      FWKEY+WAIT
MyFlash1    DW      0xA500
MyFlash3    DW      0xA500
MyR10       DL      0x000BDEAD
MyR11       DL      0x000BDEAD


; must be set from calling marco
#define MyWriteAddr R5
; must be set from calling marco
#define MyWriteSize R6
; load by funclet
#define MyWriteLock R8
; load by funclet
#define MyEraseType R9
;-------------------------------------------------------------------------------
            RSEG    MYCODE

;-------------------------------------------------------------------------------
;--- [1] Write Routine Start ---------------------------------------------------
WordWrite
StopWDT     mov.w   #WDTPW+WDTHOLD,&WDTCTL   ; Make sure watchdog timer is stopped
NotifyDriverStart
            MOV     #0xABAD,&SYSJMBO1
            MOV     #0xBABE,&SYSJMBO0
            
;--- [2] Save Context Section --------------------------------------------------
SaveFCTL    ; save Flash Controller Configuration
            MOV     &FCTL1,MyFlash1
            MOV     &FCTL3,MyFlash3
SaveR10    ; save R10 & R11 & R12
            MOVX.A  R10,MyR10
            MOVX.A  R11,MyR11

;--- [3] Actual Write Sequence -------------------------------------------------
L1          BIT     #BUSY,&FCTL3
            JNZ     L1
HandleLockedSegment
            MOV     MyWriteLock,&FCTL3    ; Assign value passed by driver
            MOV     &FCTL3,MyLockTst      ; Read out register again
            CMP.B   MyWriteLock,MyLockTst ; Is content as expected?
            JEQ     DoTask                ; Yes, continue
ToggleLockA
            MOV     MyWriteLock,R10       ; No, set LOCKA bit to be toggled
            BIS     #LOCKA,R10
            MOV     R10,&FCTL3            ; Assign value again - LOCKA will be toggled now
DoTask
            MOVX.A   MyWriteAddr,R10      ; The start address to write to
            MOVX.A   MyWriteSize,R11      ; the number of words to be written

//           MOV     #FWKEY+WRT,&FCTL1     ; configure word-write access
#ifdef SUBROUTINE
W1          ; CMP.W   @R12,0(R10)         ; check if content is already there...
            ; JEQ     Next                ; ...next word if already there
            
            MOV     #FWPW,&FCTL3          ; Clear LOCK
           ;MOV     #FWKEY+WRT,&FCTL1     ; configure word-write access
            MOVX.W  @R12+,0(R10)
Next
#else
            MOV     #JMBCLR0OFF+JMBCLR1OFF+JMBMODE,&SYSJMBC  ; disable auto-clear feature, 32bit mode
            
W1          BIT     #JMBIN0FG,&SYSJMBC    ; Data available in mailbox register 0?
            JZ      W1                    ; No, wait for data        
            
            MOV.W   &SYSJMBI0,R13        ;  move data into temp Register   
            BIC     #JMBIN0FG,&SYSJMBC    ; clear the mailbox input flag
            
            ;----------Write two Words----------------------------------------;    
            
            ; Write Word one--------------------------------------------------            
L2          BIT     #BUSY,&FCTL3
            JNZ     L2
            MOV     #FWPW,&FCTL1        ; Done. Clear WRT
            
             ; Flash ready for new data -> Write Word one
            MOV     #FWPW+WRT,&FCTL1    ; Enable write
            MOV.W   R13,0(R10)         ; WRITE, move data into Flash   
            
            INCDX.A R10                 ; count up adress
            DECX.A  R11                 ; decrement length
            
            JZ      Restore             ; last word was received      

            ; Write Word two-------------------------------------------------- 
W2          BIT     #JMBIN1FG,&SYSJMBC  ; Data available in mailbox register 0?
            JZ      W2                  ; No, wait for data   
            
            MOV.W   &SYSJMBI1,R14       ; move data into temp Register14
            BIC     #JMBIN1FG,&SYSJMBC   ; clear the mailbox input flag  
                      
            ; test if previous word was already written
L3          BIT     #BUSY,&FCTL3
            JNZ     L3            
            MOV     #FWPW,&FCTL1        ; Done. Clear WRT
            
            ; Flash ready for new data -> Write Word two
            MOV     #FWPW+WRT,&FCTL1    ; Enable write
            MOV.W   R14,0(R10)         ; WRITE, move data into Flash  
                                             
            INCDX.A R10                 ; count up adress
            DECX.A  R11                 ; decrement length
            
            JNZ     W1 
                    
  
    ;MOV       #FWKEY+BLKWRT,&FCTL1          ; configure Long-Word Write access
            
            ;  MOV.W   &SYSJMBI0,0(R10)      ; WRITE, move data into Flash     
            
            ;  INCDX.A R10                   ; count up adress
            ;  DECX.A  R11                   ; decrement length
            
            ;  MOV.W   &SYSJMBI1,0(R10)      ; WRITE, move data into Flash     
            
    ;       Next     BIC     #JMBIN1FG,&SYSJMBC    ; clear the mailbox input flag
    ;       BIC     #JMBIN0FG,&SYSJMBC    ; clear the mailbox input flag
#endif
;L2         BIT     #BUSY,&FCTL3
  ;         JNZ     L2
  ;        //MOV     #FWKEY,&FCTL1         ; disable word-write access
            
  ;        INCDX.A R10                   ; count up adress
  ;        DECX.A  R11                   ; decrement length
            
  ;        JNZ     W1           

;--- [4] Restore Context Section -----------------------------------------------
Restore     

L4          BIT     #BUSY,&FCTL3    ; wait for ast word wirrten
            JNZ     L4 
    
            BIC    #JMBIN1FG,&SYSJMBC           ; clear the mailbox input flag      
            BIC    #JMBIN0FG,&SYSJMBC           ; clear the mailbox input flag  

RestoreR10  MOVX.A  MyR10,R10
RestoreR11  MOVX.A  MyR11,R11

RestoreFCTL ; restore Flash Controller Configuration
            XOR     #0x3300,MyFlash1      ; restore password
            XOR     #0x3300,MyFlash3      ; restore password
            MOV     MyFlash1,&FCTL1
            MOV     MyFlash3,&FCTL3
RestoreLockState
            MOV     &FCTL3,MyLockTst      ; Read out register again
            CMP.B   MyFlash3,MyLockTst    ; Is content as expected?
            JEQ     NotifyDriverStop      ; Yes, continue
            BIS     #LOCKA,MyFlash3       ; No, set LOCKA bit to be toggled
            MOV     MyFlash3,&FCTL3       ; Assign value again - LOCKA will be toggled now

;--- [5] Write Routine End -----------------------------------------------------
NotifyDriverStop
            MOV     #0xCAFE,&SYSJMBO1
            MOV     #0xBABE,&SYSJMBO0
TheEnd
#ifdef SUBROUTINE
            RETA
#else       
            JMP     TheEnd
#endif
            END
